var searchIndex = JSON.parse('{\
"bi_result":{"doc":"This crate provides the <code>BiResult</code> struct.","t":[3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BiResult","0","1","ok","err","map","map_err","map_each_err","join","consume_err","and_then","push_errs","push_errs_with","push_errs_with_into","expect","unwrap","ResultExt","into_bi_result","push_error","push_error_or_default","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","eq","ne","hash","from_iter","clone","default"],"q":["bi_result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>Result</code>-like struct that always contains a value, and …","","","Creates a new <code>BiResult</code> with <code>t</code> as value and the default …","Creates a new <code>BiResult</code> with <code>e</code> as errors and the default …","Maps a <code>BiResult<T, I></code> to <code>BiResult<U, I></code> by applying a …","Maps a <code>BiResult<T, I></code> to <code>BiResult<T, V></code> by applying a …","Maps a <code>BiResult<T, I></code> to <code>BiResult<T, ...></code> by applying a …","Composes two <code>BiResult</code>s by applying <code>f</code> to unify their …","Converts a <code>Result</code> to an <code>Option</code> by appending any <code>Err</code> value …","Composes the result of applying <code>f</code> onto the value of <code>self</code> …","Extend <code>target</code> with all errors and return only the value. …","Extend <code>target</code> with all errors (applying <code>Into::into</code>) and …","Extend <code>target</code> with all errors (applying <code>Into::into</code>) and …","returns <code>self.0</code>, panics with the provided message if there …","Like <code>expect</code>, but with a default error message","Extensions to the <code>Result</code> type","Convert a <code>Result</code> to a <code>BiResult</code>","push the error in an <code>Err(_)</code> onto a collection, returning …","push the error in an <code>Err(_)</code> onto a collection, returning …","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[]],[[]],[[["fnonce",8]],["biresult",3]],[[["fnonce",8]],[["biresult",3],["intoiterator",8]]],[[["fnmut",8]],[["biresult",3],["map",3]]],[[["biresult",3],["intoiterator",8],["fnonce",8]],[["chain",3],["biresult",3]]],[[["result",4]],["option",4]],[[["fnonce",8]],[["biresult",3],["chain",3]]],[[]],[[["fnmut",8]]],[[]],[[["str",15]]],[[]],null,[[],["biresult",3]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["biresult",3]],["bool",15]],[[["biresult",3]],["bool",15]],[[]],[[["intoiterator",8]]],[[],["biresult",3]],[[],["biresult",3]]],"p":[[3,"BiResult"],[8,"ResultExt"]]},\
"cargo_pkg_info":{"doc":"This crate provides some data structures for working with …","t":[5,3,11,11,11,11,11,11,11,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cargo_pkg_version","CargoPackageInfo","current","version","name","authors","description","homepage","repository","CargoProfile","Debug","Release","current","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","fmt","fmt","eq","ne","eq","hash","hash","clone","clone"],"q":["cargo_pkg_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Get the package version for your cargo package","Information about a Cargo package","Get the info for your cargo package","","","","","","","A Cargo compilation profile","Cargo’s <code>debug</code> profile","Cargo’s <code>release</code> profile","The profile you are compiling with","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,0,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,2,1,1,2,1,2,1,2],"f":[[[],["version",3]],null,[[]],[[],["version",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,null,[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["cargopackageinfo",3]],["bool",15]],[[["cargopackageinfo",3]],["bool",15]],[[["cargoprofile",4]],["bool",15]],[[]],[[]],[[],["cargopackageinfo",3]],[[],["cargoprofile",4]]],"p":[[3,"CargoPackageInfo"],[4,"CargoProfile"]]},\
"d_impl":{"doc":"","t":[24],"n":["ToDiscriminant"],"q":["d_impl"],"d":["Derive the <code>ToDiscriminant</code> trait and create a …"],"i":[0],"f":[null],"p":[]},\
"debug_filter":{"doc":"Debug Filters","t":[8,18,4,4,4,4,6,6,6,6,8,16,16,16,16,4,3,12,12,3,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ConstValue","VALUE","U002E","U003A","U0021","StrAll","FullStop","Point","Colon","ExclamationMark","FilterParser","HierarchySeparator","FilterListSeparator","NegativeFilterPrefix","UniversalFilter","DefaultFilterParser","Filters","filters","default","OwningFilters","as_filters","new","check","parse_each","parse","from_env","from_option_env","const_types","declare_filter_parser","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","clone","default","eq","fmt"],"q":["debug_filter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This is a workaround for const generics. This trait …","The assigned value","A const type for the character U+002E Full Stop ‘.’","A const type for the character U+003A Colon ‘:’","A const type for the character U+0021 Exclamation Mark ‘…","A const type for the string “all”","","","","","A trait that includes all the parameters you can …","The separator for filter components","The separator for different filters when parsing a literal","The prefix for a filter that inverts it","The name of the universal filter","","A type that stores the filters that are currently active","A map of <code>filter -> allowed</code>","The <code>allowed</code> value for all filters not in <code>self.filters</code>","Like <code>Filters</code>, but owns the data its keys are from","Get <code>Filters</code> with the data from <code>self</code>","","gets the state of the provided filter","parse a list of filters","parse a single string into a list of filters","parse the content of the environment variable <code>name</code> at …","parse the content of the environment variable <code>name</code> at …","This macro allows quick declaration of a type for …","A macro to quickly declare a <code>FilterParser</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,3,3,0,4,3,3,3,3,3,3,0,0,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,6,7,8,3,3,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["filters",3]],[[["str",15],["bool",15],["hashmap",3]]],[[["str",15]],["bool",15]],[[["hashset",3],["str",15]]],[[["str",15]]],[[["str",15]],["owningfilters",3]],[[["str",15]],[["option",4],["owningfilters",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u002e",4]],[[],["u003a",4]],[[],["u0021",4]],[[],["strall",4]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]]],"p":[[8,"ConstValue"],[8,"FilterParser"],[3,"Filters"],[3,"OwningFilters"],[4,"U002E"],[4,"U003A"],[4,"U0021"],[4,"StrAll"],[4,"DefaultFilterParser"]]},\
"derive_discriminant":{"doc":"","t":[24,8,16,10],"n":["ToDiscriminant","ToDiscriminant","Discriminant","to_discriminant"],"q":["derive_discriminant","","",""],"d":["Derive the <code>ToDiscriminant</code> trait and create a …","","",""],"i":[0,0,1,1],"f":[null,null,null,[[]]],"p":[[8,"ToDiscriminant"]]},\
"direction":{"doc":"","t":[0,4,13,13,13,3,18,18,18,18,3,18,18,18,18,3,18,18,18,18,4,13,13,13,4,13,13,3,18,18,18,3,18,18,18,3,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ternary","TernaryDirection","Regular","Middle","Inverted","Side","Right","Center","Left","AXIS","Height","Top","Center","Bottom","AXIS","Depth","Front","Center","Back","AXIS","Axis","Side","Height","Depth","BinaryDirection","Regular","Inverted","Side","Right","Left","AXIS","Height","Top","Bottom","AXIS","Depth","Front","Back","AXIS","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id"],"q":["direction","direction::ternary","","","","","","","","","","","","","","","","","","","direction","","","","","","","","","","","","","","","","","","","direction::ternary","","","","","","","","","","","","","","","","","","","","","","","","","","","","direction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,0,2,2,2,2,0,3,3,3,3,0,4,4,4,4,0,5,5,5,0,6,6,0,7,7,7,0,8,8,8,0,9,9,9,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"TernaryDirection"],[3,"Side"],[3,"Height"],[3,"Depth"],[4,"Axis"],[4,"BinaryDirection"],[3,"Side"],[3,"Height"],[3,"Depth"]]},\
"growable_iter":{"doc":"This crate provides the <code>GrowableIterator</code> struct.","t":[3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["GrowableIterator","Growable","growable","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","next_back","next","push_front","push_back","peek_front","peek_back"],"q":["growable_iter","","","","","","","","","","","","","","","",""],"d":["An iterator that can grow to both sides after creation","A trait to create a <code>GrowableIterator</code> from a regular …","creates a <code>GrowableIterator</code> from <code>self</code>, <code>front</code> and <code>back</code>","","","","","","","","","","","","","",""],"i":[0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[null,null,[[],["growableiterator",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["option",4]]],"p":[[8,"Growable"],[3,"GrowableIterator"]]},\
"infinite_iterators":{"doc":"<code>infinite_iterators</code>: Iterators that never end","t":[0,3,3,3,3,8,11,8,11,8,16,10,11,11,11,11,3,5,3,5,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["iters","Chain","StepBy","Take","Inf","PromiseInfinite","promise_infinite","ChainInfinite","chain_infinite","InfiniteIterator","Item","next","nth","step_by","take","iterator","FromFn","from_fn","Successors","successors","Decaying","decaying","true_once","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","next","next","next","next","next","next","next","next"],"q":["infinite_iterators","infinite_iterators::iters","","","","infinite_iterators","","","","","","","","","","","","","","","","","","infinite_iterators::iters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","infinite_iterators","","","","","","","","","","","","","","","","","","","","","infinite_iterators::iters","","","infinite_iterators","","","infinite_iterators::iters",""],"d":["","","","","A struct that converts between <code>Iterator</code> and …","Promote an iterator to an infinite iterator","","","","An iterator that never ends","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,2,0,3,3,3,3,3,3,0,0,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,4,5,7,8,9,10,6,7],"f":[null,null,null,null,null,null,[[],["inf",3]],null,[[["infiniteiterator",8]],[["infiniteiterator",8],["chain",3]]],null,null,[[]],[[["usize",15]]],[[["usize",15]],["stepby",3]],[[["usize",15]],["take",3]],[[],["inf",3]],null,[[["fnmut",8]],[["fromfn",3],["fnmut",8]]],null,[[["fnmut",8]],[["fnmut",8],["successors",3]]],null,[[["default",8]],[["default",8],["decaying",3]]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]]],"p":[[8,"PromiseInfinite"],[8,"ChainInfinite"],[8,"InfiniteIterator"],[3,"Chain"],[3,"StepBy"],[3,"Take"],[3,"Inf"],[3,"FromFn"],[3,"Successors"],[3,"Decaying"]]},\
"map_range":{"doc":"This crate provides the <code>MapRange</code> struct.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MapRange","from_start_end","from_start_len","eval","into_eval","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","eq","ne","fmt","hash"],"q":["map_range","","","","","","","","","","","","","","","","","",""],"d":["A struct for mapping ranges linearly","Construct the map from two start-end pairs of values","Construct the map from two start-length pairs of values","Evaluate the map for a point.","Evaluate the map for a point.","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["maprange",3]],[[["maprange",3]],["bool",15]],[[["maprange",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]]],"p":[[3,"MapRange"]]},\
"nonempty_vec":{"doc":"This crate provides a <code>Vec</code>-like struct that cannot be empty","t":[8,18,4,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["HeadLocation","HEAD_FIRST","HeadFirst","HeadLast","NonemptyVec","new","head","head_mut","into_head","tail","tail_mut","into_tail","into_head_tail","len","push","pop","insert","remove","into_vec","first","first_mut","into_first","last","last_mut","into_last","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_iter","clone","default","eq","ne","fmt"],"q":["nonempty_vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Specifies the location the head item has in relation to …","This constant can be used to write code generic over …","The head item is in front of the rest (at index <code>0</code>)","The head item is after the rest (at index <code>len-1</code>)","A <code>Vec</code> that always has at least one element","Creates a new <code>NonemptyVec</code> with one element","The <code>head</code> is simply the element guaranteed to exist. It is …","Like <code>head</code> but mutable","Consumes <code>self</code> and returns the head","The <code>tail</code> is simply all elements that are not guaranteed …","Like <code>tail</code> but mutable","Consumes <code>self</code> and returns the tail","Consumes <code>self</code> and returns the head and the tail","Returns the length of <code>self</code>","Pushes an element to the end of <code>self</code>","Removes the last element from <code>self</code> (unless <code>self</code> has only …","Inserts an element at the specified index","Removes an element from the specified index; Returns <code>None</code> …","Creates a <code>Vec</code> from all its elements","The first element","The first element, mutable","Returns the current first element, consuming <code>self</code>","The last element","The last element, mutable","Returns the current last element, consuming <code>self</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[]],[[],["nonzerousize",3]],[[]],[[],["option",4]],[[["usize",15]]],[[["usize",15]],["option",4]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["nonemptyvec",3]],[[],["nonemptyvec",3]],[[["nonemptyvec",3]],["bool",15]],[[["nonemptyvec",3]],["bool",15]],[[["formatter",3]],["result",6]]],"p":[[8,"HeadLocation"],[3,"NonemptyVec"],[4,"HeadFirst"],[4,"HeadLast"]]},\
"some_macros":{"doc":"This crate provides some macros","t":[14,14,14,14,14,14,14],"n":["count_args","vec_deque","hash_map","hash_set","dbgr","debug_lvl","alt"],"q":["some_macros","","","","","",""],"d":["Counts how many arguments it receives.","Constructs a VecDeque, calling <code>into</code> on the keys and values","Constructs a HashMap, calling <code>into</code> on the keys and values","Constructs a HashSet, calling <code>into</code> on the values","A macro to print pretty looking and informative debug …","Returns a boolean that tells you whether a specific …","A macro that returns the first set of token trees it gets"],"i":[0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null],"p":[]},\
"span":{"doc":"This crate provides the <code>Span</code> struct.","t":[3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Span","start","len","new","from_range","start","len","is_empty","end","as_range","contains","join","join_all","split_at","split_at_rel","Spanned","span","inner","new","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","deref","deref_mut","fmt","fmt","eq","ne","eq","ne","cmp","partial_cmp","hash","hash","from","into","clone","clone"],"q":["span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>Span</code> is basically like a <code>Range<usize></code> but it has some …","The starting position","The length","Creates a new <code>Span</code> from a start position and a length","Creates a new <code>Span</code> from a start position and a length","The start position","The length","Determines wheter the <code>Span</code> is empty, i.e. of length 0","The end position (the one-after-end index)","Converts the <code>Span</code> to its equivalent <code>Range<usize></code>","Returns whether <code>other</code> is contained within <code>self</code> (this …","Create a (the smallest) span that contains both <code>self</code> and …","Create a (the smallest) span that contains both all …","Split the span at a middle point","Like <code>split_at</code>, but the position is given relative to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,2,1,1,2,2,2,2,1,2,1,1,1,2],"f":[null,null,null,[[["usize",15]]],[[["usize",15],["range",3]]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[],[["usize",15],["range",3]]],[[],["bool",15]],[[]],[[["intoiterator",8]],["option",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],null,null,null,[[["span",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["span",3]],["bool",15]],[[["span",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[["spanned",3]],["bool",15]],[[],["ordering",4]],[[],[["option",4],["ordering",4]]],[[]],[[]],[[["usize",15],["range",3]]],[[],[["usize",15],["range",3]]],[[],["span",3]],[[],["spanned",3]]],"p":[[3,"Span"],[3,"Spanned"]]},\
"string_to_static":{"doc":"","t":[3,12,12,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["WithOption","always","maybe","single","both","LeakedStringRegistry","new","insert_then_leak","insert_then_leak_else_drop","insert_then_leak_to_string","get","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","default","default","eq","ne","eq","ne","fmt","fmt","hash"],"q":["string_to_static","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,0,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,2,1,2,1,1,2,2,1,2,1],"f":[null,null,null,[[]],[[]],null,[[]],[[["string",3]],[["withoption",3],["str",15],["string",3]]],[[["string",3]],["str",15]],[[["str",15]],["str",15]],[[],[["str",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["withoption",3]],[[],["leakedstringregistry",3]],[[],["withoption",3]],[[],["leakedstringregistry",3]],[[["withoption",3]],["bool",15]],[[["withoption",3]],["bool",15]],[[["leakedstringregistry",3]],["bool",15]],[[["leakedstringregistry",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]]],"p":[[3,"WithOption"],[3,"LeakedStringRegistry"]]},\
"type_list":{"doc":"Heterogeneous lists, with or without values (the latter …","t":[0,8,16,16,18,10,10,10,10,10,10,10,3,3,5,8,16,10,0,8,16,16,18,4,3,8,16,6,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["het_list","HetList","Head","Tail","LEN","head","tail","head_mut","tail_mut","into_head","into_tail","into_head_tail","Nil","Cons","cons","AppendItem","Output","append","type_list","TypeList","Head","Tail","LEN","Nil","Cons","AppendType","Output","Append","het_list","type_list","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","head","tail","head_mut","tail_mut","into_head","into_tail","into_head_tail","head","tail","head_mut","tail_mut","into_head","into_tail","into_head_tail","append","append"],"q":["type_list","type_list::het_list","","","","","","","","","","","","","","","","","type_list","type_list::type_list","","","","","","","","","type_list","","type_list::het_list","","","","","","","","","","","","","","type_list::type_list","","","","","","","","","","","","","","type_list::het_list","","","","","","","","","","","","","","",""],"d":["A heterogeneous list","The core trait that any heterogeneous list implements","The type of the first element","The type of the rest of the list","The length of the list","The first element","The rest of the list","The first element mutable","The rest of the list mutable","The first element, consuming <code>self</code>","The rest of the list, consuming <code>self</code>","The first element and the rest of the list, consuming <code>self</code>","The empty heterogeneous list","The heterogeneous list with a head of type <code>T</code> and a tail …","a helper function to ease the creation of new …","A function-trait. Its <code>Output</code> type is the list that …","The list that represents <code>[..., T]</code> where <code>...</code> are all …","appends an element to the end of the list","A list consisting purely of types","The core trait that any type list implements","The first item of the list","The rest of the list","The length of the list","The empty type list","<code>Cons<T, ...></code> represents the list <code>[T, ...]</code> where <code>...</code> are …","A function-trait. Its <code>Output</code> type is the list that …","The list that represents <code>[..., T]</code> where <code>...</code> are all …","An alias to append a type to the end of a type list","A macro that creates a heterogeneous list. The syntax is …","A macro that creates a type list. The syntax is like <code>vec!</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,2,0,0,3,3,3,0,0,0,4,0,0,0,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,5,5,5,5,5,5,5,6,6,6,6,6,6,6,5,6],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["hetlist",8]],[["cons",3],["hetlist",8]]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"HetList"],[8,"AppendItem"],[8,"TypeList"],[8,"AppendType"],[3,"Nil"],[3,"Cons"],[4,"Nil"],[3,"Cons"]]},\
"vec_like":{"doc":"This crate provides some traits that capture behaviour …","t":[8,16,10,8,16,10,8,10,8,10,8,10,8,10],"n":["PushFront","Err","push_front","PushBack","Err","push_back","PopFront","pop_front","PopBack","pop_back","PeekFront","peek_front","PeekBack","peek_back"],"q":["vec_like","","","","","","","","","","","","",""],"d":["Add an element to the front of the list","The type of the failure value","Try to add an element to the front of the list.","Add an element to the back of the list","The type of the failure value","Try to add an element to the back of the list.","Remove an element from the front of the list","Try to remove an element from the front of the list.","Remove an element from the back of the list","Try to remove an element from the back of the list.","Get the element at the front of the list","Try to get the element at the front of the list.","Get the element at the back of the list","Try to get the element at the back of the list."],"i":[0,1,1,0,2,2,0,3,0,4,0,5,0,6],"f":[null,null,[[],["result",4]],null,null,[[],["result",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]]],"p":[[8,"PushFront"],[8,"PushBack"],[8,"PopFront"],[8,"PopBack"],[8,"PeekFront"],[8,"PeekBack"]]}\
}');
initSearch(searchIndex);